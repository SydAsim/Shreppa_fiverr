import { useState } from 'react';
import { motion } from 'framer-motion';
import { Upload, FileText, AlertTriangle, TrendingUp, Shield, Zap } from 'lucide-react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Textarea } from '@/components/ui/textarea';
import { Badge } from '@/components/ui/badge';
import { Progress } from '@/components/ui/progress';
import { useToast } from '@/hooks/use-toast';
import AnimatedCounter from '@/components/ui/animated-counter';

interface AnalysisResult {
  id: string;
  fileName: string;
  uploadTime: string;
  status: 'analyzing' | 'completed' | 'failed';
  findings: {
    critical: number;
    high: number;
    medium: number;
    low: number;
  };
  aiInsights: string[];
  riskScore: number;
}

const mockAnalysisResults: AnalysisResult[] = [
  {
    id: '1',
    fileName: 'network_scan_results.json',
    uploadTime: '2 hours ago',
    status: 'completed',
    findings: { critical: 3, high: 7, medium: 12, low: 8 },
    aiInsights: [
      'Multiple SQL injection vulnerabilities detected in authentication endpoints',
      'Outdated SSL/TLS configurations pose significant security risks',
      'Cross-site scripting vulnerabilities found in user input fields'
    ],
    riskScore: 78
  },
  {
    id: '2', 
    fileName: 'penetration_test_report.pdf',
    uploadTime: '1 day ago',
    status: 'completed',
    findings: { critical: 1, high: 4, medium: 8, low: 15 },
    aiInsights: [
      'Privilege escalation vulnerability in admin panel requires immediate attention',
      'Weak password policies increase attack surface',
      'Missing input validation in API endpoints'
    ],
    riskScore: 65
  }
];

export default function VulnerabilityFeedPage() {
  const [analysisResults, setAnalysisResults] = useState<AnalysisResult[]>(mockAnalysisResults);
  const [uploading, setUploading] = useState(false);
  const [manualInput, setManualInput] = useState('');
  const { toast } = useToast();

  const handleFileUpload = async (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (!file) return;

    setUploading(true);
    
    // Simulate upload and analysis
    setTimeout(() => {
      const newAnalysis: AnalysisResult = {
        id: Date.now().toString(),
        fileName: file.name,
        uploadTime: 'Just now',
        status: 'analyzing',
        findings: { critical: 0, high: 0, medium: 0, low: 0 },
        aiInsights: [],
        riskScore: 0
      };

      setAnalysisResults(prev => [newAnalysis, ...prev]);
      
      // Simulate analysis completion
      setTimeout(() => {
        setAnalysisResults(prev => prev.map(result => 
          result.id === newAnalysis.id 
            ? {
                ...result,
                status: 'completed',
                findings: {
                  critical: Math.floor(Math.random() * 5),
                  high: Math.floor(Math.random() * 10) + 2,
                  medium: Math.floor(Math.random() * 15) + 5,
                  low: Math.floor(Math.random() * 20) + 8
                },
                aiInsights: [
                  'AI detected potential security vulnerabilities requiring immediate review',
                  'Automated analysis suggests implementing additional security measures',
                  'Pattern recognition identified common attack vectors in the submitted data'
                ],
                riskScore: Math.floor(Math.random() * 40) + 40
              }
            : result
        ));
        
        toast({
          title: "Analysis Complete",
          description: `Successfully analyzed ${file.name} and identified potential vulnerabilities.`,
        });
      }, 3000);
      
      setUploading(false);
    }, 1000);
  };

  const handleManualAnalysis = () => {
    if (!manualInput.trim()) {
      toast({
        title: "Missing Input",
        description: "Please provide vulnerability data for analysis.",
        variant: "destructive",
      });
      return;
    }

    const newAnalysis: AnalysisResult = {
      id: Date.now().toString(),
      fileName: 'manual_input.txt',
      uploadTime: 'Just now',
      status: 'completed',
      findings: {
        critical: Math.floor(Math.random() * 3) + 1,
        high: Math.floor(Math.random() * 5) + 2,
        medium: Math.floor(Math.random() * 8) + 3,
        low: Math.floor(Math.random() * 10) + 5
      },
      aiInsights: [
        'Manual analysis reveals potential security concerns in the provided data',
        'AI recommends further investigation of identified patterns',
        'Cross-referencing with known vulnerability databases suggests immediate action'
      ],
      riskScore: Math.floor(Math.random() * 30) + 50
    };

    setAnalysisResults(prev => [newAnalysis, ...prev]);
    setManualInput('');
    
    toast({
      title: "Analysis Complete",
      description: "Successfully analyzed manual input and generated security insights.",
    });
  };

  return (
    <div>
      <div className="mb-8">
        <h1 className="text-3xl font-bold text-gray-900 dark:text-white mb-2">Vulnerability Feed Analysis</h1>
        <p className="text-gray-600 dark:text-gray-300">Upload security reports and data for AI-powered vulnerability analysis</p>
      </div>

      {/* Upload Section */}
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6 mb-8">
        <motion.div
          initial={{ opacity: 0, x: -20 }}
          animate={{ opacity: 1, x: 0 }}
          transition={{ duration: 0.5 }}
        >
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center space-x-2">
                <Upload className="w-5 h-5" />
                <span>Upload Security Reports</span>
              </CardTitle>
              <CardDescription>
                Upload vulnerability scans, penetration test reports, or security assessments
              </CardDescription>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="border-2 border-dashed border-gray-300 dark:border-gray-600 rounded-lg p-6 text-center">
                <FileText className="w-12 h-12 text-gray-400 mx-auto mb-4" />
                <div className="space-y-2">
                  <p className="text-sm text-gray-600 dark:text-gray-300">
                    Drop files here or click to browse
                  </p>
                  <p className="text-xs text-gray-500 dark:text-gray-400">
                    Supports JSON, XML, PDF, CSV files up to 10MB
                  </p>
                </div>
                <Input
                  type="file"
                  accept=".json,.xml,.pdf,.csv,.txt"
                  onChange={handleFileUpload}
                  disabled={uploading}
                  className="mt-4"
                />
              </div>
              {uploading && (
                <div className="space-y-2">
                  <div className="flex justify-between text-sm">
                    <span>Uploading and analyzing...</span>
                    <span>Processing</span>
                  </div>
                  <Progress value={75} className="h-2" />
                </div>
              )}
            </CardContent>
          </Card>
        </motion.div>

        <motion.div
          initial={{ opacity: 0, x: 20 }}
          animate={{ opacity: 1, x: 0 }}
          transition={{ duration: 0.5, delay: 0.1 }}
        >
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center space-x-2">
                <Zap className="w-5 h-5" />
                <span>Manual Analysis</span>
              </CardTitle>
              <CardDescription>
                Paste vulnerability data or security findings for instant AI analysis
              </CardDescription>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="space-y-2">
                <Label>Security Data Input</Label>
                <Textarea
                  value={manualInput}
                  onChange={(e) => setManualInput(e.target.value)}
                  placeholder="Paste vulnerability scan results, security logs, or any security-related data here..."
                  rows={6}
                  className="resize-none"
                />
              </div>
              <Button 
                onClick={handleManualAnalysis}
                className="w-full"
                disabled={!manualInput.trim()}
              >
                <AlertTriangle className="w-4 h-4 mr-2" />
                Analyze Data
              </Button>
            </CardContent>
          </Card>
        </motion.div>
      </div>

      {/* Analysis Results */}
      <div className="space-y-6">
        <h2 className="text-2xl font-bold text-gray-900 dark:text-white">Analysis Results</h2>
        
        {analysisResults.map((result, index) => (
          <motion.div
            key={result.id}
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.5, delay: index * 0.1 }}
          >
            <Card>
              <CardHeader>
                <div className="flex items-center justify-between">
                  <div className="flex items-center space-x-3">
                    <FileText className="w-6 h-6 text-blue-500" />
                    <div>
                      <CardTitle className="text-lg">{result.fileName}</CardTitle>
                      <CardDescription>{result.uploadTime}</CardDescription>
                    </div>
                  </div>
                  <Badge 
                    className={
                      result.status === 'completed' ? 'bg-green-500' :
                      result.status === 'analyzing' ? 'bg-yellow-500' : 'bg-red-500'
                    }
                  >
                    {result.status.charAt(0).toUpperCase() + result.status.slice(1)}
                  </Badge>
                </div>
              </CardHeader>
              
              {result.status === 'analyzing' ? (
                <CardContent>
                  <div className="flex items-center space-x-3">
                    <div className="animate-spin rounded-full h-5 w-5 border-b-2 border-blue-500"></div>
                    <span className="text-gray-600 dark:text-gray-300">AI is analyzing your data...</span>
                  </div>
                </CardContent>
              ) : result.status === 'completed' ? (
                <CardContent>
                  <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
                    {/* Vulnerability Summary */}
                    <div className="lg:col-span-1">
                      <h4 className="font-semibold text-gray-900 dark:text-white mb-4">Findings Summary</h4>
                      <div className="space-y-3">
                        <div className="flex items-center justify-between">
                          <div className="flex items-center space-x-2">
                            <div className="w-3 h-3 bg-red-500 rounded-full"></div>
                            <span className="text-sm">Critical</span>
                          </div>
                          <AnimatedCounter target={result.findings.critical} />
                        </div>
                        <div className="flex items-center justify-between">
                          <div className="flex items-center space-x-2">
                            <div className="w-3 h-3 bg-orange-500 rounded-full"></div>
                            <span className="text-sm">High</span>
                          </div>
                          <AnimatedCounter target={result.findings.high} />
                        </div>
                        <div className="flex items-center justify-between">
                          <div className="flex items-center space-x-2">
                            <div className="w-3 h-3 bg-yellow-500 rounded-full"></div>
                            <span className="text-sm">Medium</span>
                          </div>
                          <AnimatedCounter target={result.findings.medium} />
                        </div>
                        <div className="flex items-center justify-between">
                          <div className="flex items-center space-x-2">
                            <div className="w-3 h-3 bg-green-500 rounded-full"></div>
                            <span className="text-sm">Low</span>
                          </div>
                          <AnimatedCounter target={result.findings.low} />
                        </div>
                      </div>
                      
                      <div className="mt-6">
                        <div className="flex items-center justify-between mb-2">
                          <span className="text-sm font-medium">Risk Score</span>
                          <span className="text-sm font-bold">
                            <AnimatedCounter target={result.riskScore} suffix="/100" />
                          </span>
                        </div>
                        <Progress value={result.riskScore} className="h-2" />
                      </div>
                    </div>

                    {/* AI Insights */}
                    <div className="lg:col-span-2">
                      <h4 className="font-semibold text-gray-900 dark:text-white mb-4 flex items-center">
                        <Shield className="w-4 h-4 mr-2" />
                        AI Security Insights
                      </h4>
                      <div className="space-y-3">
                        {result.aiInsights.map((insight, idx) => (
                          <div 
                            key={idx}
                            className="flex items-start space-x-3 p-3 bg-blue-50 dark:bg-blue-900/20 rounded-lg"
                          >
                            <TrendingUp className="w-4 h-4 text-blue-500 mt-0.5 flex-shrink-0" />
                            <p className="text-sm text-gray-700 dark:text-gray-300">{insight}</p>
                          </div>
                        ))}
                      </div>
                      
                      <div className="mt-4 flex space-x-2">
                        <Button variant="outline" size="sm">
                          Export Report
                        </Button>
                        <Button variant="outline" size="sm">
                          Create Tickets
                        </Button>
                        <Button size="sm" className="bg-primary">
                          View Details
                        </Button>
                      </div>
                    </div>
                  </div>
                </CardContent>
              ) : (
                <CardContent>
                  <div className="text-center py-4">
                    <AlertTriangle className="w-8 h-8 text-red-500 mx-auto mb-2" />
                    <p className="text-red-600 dark:text-red-400">Analysis failed. Please try uploading again.</p>
                  </div>
                </CardContent>
              )}
            </Card>
          </motion.div>
        ))}
      </div>
    </div>
  );
}